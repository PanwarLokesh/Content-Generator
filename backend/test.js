const s = "Inheritance is a fundamental concept in object-oriented programming (OOP) where one class (the child class or subclass) acquires the properties (fields) and behaviors (methods) of another class (the parent class or superclass).  This promotes code reusability and establishes a \"is-a\" relationship.  For example, a \"Car\" class might be a subclass of a \"Vehicle\" class because a car *is a* vehicle.\n\nLet's illustrate with Python and Java examples:\n\n**Python:**\n\n```python\n# Parent class (Superclass)\nclass Vehicle:\n    def __init__(self, color, num_wheels):\n        self.color = color\n        self.num_wheels = num_wheels\n\n    def drive(self):\n        print(\"Vehicle is driving\")\n\n# Child class (Subclass) inheriting from Vehicle\nclass Car(Vehicle):\n    def __init__(self, color, num_wheels, num_doors):\n        # Call the parent class's constructor to initialize inherited attributes\n        super().__init__(color, num_wheels)  \n        self.num_doors = num_doors\n\n    def honk(self):\n        print(\"Car is honking\")\n\n# Create instances\nmy_vehicle = Vehicle(\"blue\", 4)\nmy_car = Car(\"red\", 4, 4)\n\n# Accessing inherited methods and attributes\nmy_vehicle.drive()  # Output: Vehicle is driving\nmy_car.drive()     # Output: Vehicle is driving (inherited from Vehicle)\nmy_car.honk()      # Output: Car is honking\nprint(my_car.color) # Output: red (inherited from Vehicle)\n```\n\nIn this example:\n\n* `Vehicle` is the parent class.  It has attributes (`color`, `num_wheels`) and a method (`drive`).\n* `Car` is the child class, inheriting from `Vehicle`. It adds its own attribute (`num_doors`) and method (`honk`).\n* `super().__init__(color, num_wheels)` in the `Car` class calls the constructor of the `Vehicle` class to initialize the inherited attributes.  This is crucial.\n\n**Java:**\n\n```java\n// Parent class (Superclass)\nclass Vehicle {\n    String color;\n    int numWheels;\n\n    public Vehicle(String color, int numWheels) {\n        this.color = color;\n        this.numWheels = numWheels;\n    }\n\n    public void drive() {\n        System.out.println(\"Vehicle is driving\");\n    }\n}\n\n// Child class (Subclass) inheriting from Vehicle\nclass Car extends Vehicle {\n    int numDoors;\n\n    public Car(String color, int numWheels, int numDoors) {\n        super(color, numWheels); // Call the parent class's constructor\n        this.numDoors = numDoors;\n    }\n\n    public void honk() {\n        System.out.println(\"Car is honking\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Vehicle myVehicle = new Vehicle(\"blue\", 4);\n        Car myCar = new Car(\"red\", 4, 4);\n\n        myVehicle.drive(); // Output: Vehicle is driving\n        myCar.drive();     // Output: Vehicle is driving\n        myCar.honk();      // Output: Car is honking\n        System.out.println(myCar.color); // Output: red\n    }\n}\n```\n\nThe Java example mirrors the Python example, demonstrating inheritance with constructors and methods.  `extends` keyword signifies inheritance.  `super()` calls the parent class's constructor.\n\n\n**Key Concepts Related to Inheritance:**\n\n* **Polymorphism:** The ability of objects of different classes to respond to the same method call in their own specific way.  In the examples above, both `Vehicle` and `Car` have a `drive()` method, but their implementations might differ slightly (though not in this simple example).\n\n* **Method Overriding:** When a child class provides a specific implementation for a method that is already defined in its parent class.  The child class's version \"overrides\" the parent class's version.\n\n* **Abstraction:** Hiding complex implementation details and showing only essential information to the user.  Inheritance can contribute to abstraction by allowing you to build upon existing classes without needing to know all their internal workings.\n\n\nInheritance is a powerful tool, but overuse can lead to tight coupling between classes, making your code harder to maintain and extend.  Use it judiciously when a clear \"is-a\" relationship exists between classes.\n"